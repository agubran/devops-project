Docker  :
    command:
		docker login
		docker images
		docker Container ls
		docker stop [ContainerID] -f 
		docker rm   [ContainerID] -f 
		docker rmi  [ImageID] -f 
		docker tag  [ImageID] [NewTag]:[Version]
		docker scan [ImageName]
        docker exec -it ContainerID /bin/bash

		
    #Example Web  -> http://localhost:5000
			docker build -f "Path/Dockerfile" -t ImageName:latest .
			docker run -
			d --name ContainerName -p 5000:80  ImageName:latest	
			docker tag [ImageID] repo/ImageName:latest

Docker Compse :
    docker-compose -f docker-compose.yml -f docker-compose.override.yml up -d
	docker-compose -f docker-compose.yml -f docker-compose.override.yml down

k8s :
    Command:
		kubectl get namespace
		kubectl create namespace nameOfNs
		kubectl config set-context --current --namespace=nameOfNs

		kubectl get all 
		kubectl get svc
		kubectl get pods
		kubectl get podName -o wide
		kubectl describe service serviceName
		kubectl describe pod podName
		kubectl logs [Name]
		kubectl expose deployment deploymentName --port=8080 --port=8080 --type=NodePort
		kubectl expose deployment deploymentName --port=80 --target-port=8000
	 	kubectl port-forward deploymentName 32500:31500
		kubectl get nodes --output wide
        kubectl describe configmaps [Name]
		kubectl exec -it [PodName] -- bash

		kubectl get deployment [DeploymentName] -n default -o yaml > NewName.yaml 

    Deploy :
	  kubectl apply -f deployment/k8s
	  kubectl delete -f deployment/k8s

HelmChart :
    Command : 
	  helm --help 
	  helm list -a
	  helm create    [Name]
      helm install   [Name] 
	  helm upgrade   [Name]  [Use: --dry-run --debug to check errors]
	  helm status    [Name]
	  helm rollout   [Name]
	  helm uninstall [Name]
      helm rollback  [RELEASE] [REVISION]
	  helm tempalte  [PathToChart] => helm template PathOfChart\web
    
    Example- when use bash use '/' instead of '\' :
      helm upgrade --install nameOfChart  PathOfChart\web --dry-run --debug
	  helm upgrade --install nameOfChart  PathOfChart\web
      helm upgrade --install web C:\Users\agubran\Desktop\MyFiles\GitHub-Repo\devops-project\deployment\helm-charts\web --dry-run --debug
      
	  helm upgrade --install mongodb ./mongodb/     --dry-run --debug
	  helm upgrade --install api ./api/             --dry-run --debug
	  helm upgrade --install web ./web/             --dry-run --debug

	  helm upgrade --install mongodb ./mongodb/
	  helm upgrade --install api ./api/   
	  helm upgrade --install web ./web/   


HelmFile:
    helmfile sync
    helmfile apply
Argo :